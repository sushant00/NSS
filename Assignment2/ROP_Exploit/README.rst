SIMPLE ROP EXPLOIT
*******************

.. contents:: **Contents of this document**
   :depth: 2


Description
===========
We are given a binary (named 'victim-nonexec-stack') which has SSP turned off and also the stack is non executable. We want to perform a rop exploit. We would force the victim to call the execve system call and eventually halt program to shut the system down.

Get Started
===========

Step 0
------
We would first turn the ASLR off (which is enabled by default on modern systems). We add the line **kernel.randomize_va_space=0** to end of file **/etc/sysctl.conf** and apply the changes by running the following command

.. code:: shell

	sysctl -p

Step 1
------
We would now generate the input to pass to the vicitm

.. code:: shell

	sh gen_input.sh

Step 2
-------
Finally, exploit the victim program

.. code:: shell

	./victim < input
	


Implementation
==============
Running gdb victim-nonexec-stack and then disas main shows the assembly code for the victim program. After analyzing it is clear that the buffer size is **64 bytes**. We also obtain the address of buffer analyzing the program using gdb.


The script **gen_input.sh** generates the input such that the buffer fills and creates the stack structure as shown:

string NULL
\---------------------------------
string '-p' (NULL terminated array)
\---------------------------------
string '/sbin/halt'
\---------------------------------
address of system() (in libc)
\---------------------------------
address of null string
\---------------------------------
address of string '-p'
\---------------------------------
address of string '/sbin/halt'
\---------------------------------
address to following instruction:
pop %rdi;
pop %rsi;
pop %rdx;
ret;
\---------------------------------
RBP register
\---------------------------------
Buffer (64 bytes)
\---------------------------------




./victim-nonexec-stack

in other terminal
ps -C victim-nonexec-stack

check the pid from above

cat /proc/<pid>/maps

observe map of the libc





Reference
=========
https://github.com/finallyjustice/security/tree/master/rop/demo1
https://github.com/JonathanSalwan/ROPgadget


Author: Sushant Kumar Singh